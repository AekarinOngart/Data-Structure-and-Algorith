# -*- coding: utf-8 -*-
"""64015172.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CxJbeHc9qQq9jkDufh6X8ugPL3YYQXWb

# üî∞ **64015172 ‡πÄ‡∏≠‡∏Å‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå ‡∏≠‡∏á‡∏≠‡∏≤‡∏à**

## ‡∏£‡∏ß‡∏°‡πÉ‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß : https://shorturl.at/fgkw6

---
# ‚úÖ Lab09 : Recursive

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://classroom.google.com/u/1/c/NDk3MTYxNzU2NDgy/a/NTY4OTQ5MjY5Nzc4/details

## ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Recursive

### def isPalindrome(str):
"""

def isPalindrome(str1):
    if len(str1) <= 1:
        return True
    if str1[0] != str1[-1]:
        return False
    return isPalindrome(str1[1:-1])

print(isPalindrome("abcdcba"))
print(isPalindrome("atoyota"))
print(isPalindrome("kmitl"))
print(isPalindrome("manassanan"))
print(isPalindrome("programming"))
print(isPalindrome("fundamental"))

"""### def isAscending(list_of_integer):"""

def isAscending(list_of_integer, n):
    if n == len(list_of_integer)-1:
        return True
    else:
        if list_of_integer[n] <= list_of_integer[n+1]:
            return isAscending(list_of_integer, n+1)
        else:
            return False

print(isAscending([1, 2, 3, 4, 5, 6, 7], 0))
print(isAscending([3, 4, 2, 5, 6, 1, 2], 0))
print(isAscending([9, 8, 7, 6, 5, 4], 0))
print(isAscending([0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 0))
print(isAscending([6, 7, 8, 9, 10, 11, 12], 0))
print(isAscending([6, 3, 8, 7, 9, 2, 3, 1, 5], 0))

"""### def group_of_no_1(island_list,point_no):"""

def group_of_no_1(island_list, point_no):
    if point_no < 0 or point_no == len(island_list):
        return 0
    if island_list[point_no] == 1:
        island_list[point_no] = 0
        return 1 + group_of_no_1(island_list, point_no-1) + group_of_no_1(island_list, point_no+1)
    else:
        return 0

print(group_of_no_1([1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], 1))
print(group_of_no_1([1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0], 5))
print(group_of_no_1([1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], 4))
print(group_of_no_1([1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], 10))
print(group_of_no_1([1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1], 1))
print(group_of_no_1([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], 7))

"""### def valid_parentheses(str):"""

def valid_parentheses(str):
    if str == "":
        return True
    elif str.find("()") != -1:
        return valid_parentheses(str.replace("()", ""))
    else:
        return False


print(valid_parentheses("(()()(())())"))
print(valid_parentheses("((()()"))
print(valid_parentheses("())()()("))
print(valid_parentheses("(((()))((())))"))
print(valid_parentheses("()()(((())))"))
print(valid_parentheses("()"))

"""---
# ‚úÖ Lab08 : Binary and Sequential Search

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://classroom.google.com/u/0/c/NDk3MTYxNzU2NDgy/a/NTYwODU1MDM1OTA0/details

## ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
"""

import random
comparecount = 0


def binary_search(arr, low, high, x):

    global comparecount
    if high >= low:
        mid = (high + low) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] > x:
            comparecount += 1
            print("comparecount = ", comparecount,
                  "low = ", low, "high =", mid-1)
            return binary_search(arr, low, mid - 1, x)
        else:
            comparecount += 1
            print("comparecount = ", comparecount,
                  "low = ", mid+1, "high =", high)
            return binary_search(arr, mid + 1, high, x)
    else:
        return -1


def sequential_search(arr, x):

    global comparecount
    for i in arr:
        comparecount += 1
        if i == x:
            return comparecount
    return -1


datcount = 100000
# incase of sequential search
arr = [random.randint(1, 10000000) for i in range(datcount)]
# in case of binary search
arr = sorted([random.randint(1, 10000000) for i in range(datcount)])
# in case of succesfully search
x = arr[random.randint(1, datcount)]
# in case of unsuccessfully search
x = -1

# worstcase successfully search
x = arr[-1]
print("key =", x)
print("data len = ", len(arr))
# in case of binary search
result = binary_search(arr, 0, len(arr)-1, x)
# incase of sequential search
result = sequential_search(arr, x)
print("compare count = ", comparecount)
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")

"""---
# ‚úÖ Lab07 : Sorting

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://classroom.google.com/u/0/c/NDk3MTYxNzU2NDgy/a/NTAyOTcxMjI2NTU4/details

---
# ‚úÖ Lab06 : AVL Tree ‡πÅ‡∏•‡∏∞ B-Tree

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô: https://drive.google.com/file/d/1nbOMzhWs0g17EWEvePdA_OOQV7707K_M/view

## Lab06 : Implementation _ Tree 2
"""

#‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß

"""---
# ‚úÖ Lab05 : Implementation _ Tree 1

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://drive.google.com/file/d/12Wq9c_W0mdfBudCY6vSz8IIrOW75l9FH/view

##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : ‡∏™‡∏£‡πâ‡∏≤‡∏á Tree
"""

#@title ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πç‡∏≤‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á tree ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÇ‡∏î‡∏¢ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 15,3,16,9,23,11,7,5,34,19,2 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô PrintTree() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
    
    def __str__(self):
        return str(self.data)

class BST:
    def __init__(self):
        self.root = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            root = self.root
            while True:
                if data < root.data:
                    if root.left is None:
                        root.left = Node(data)
                        break
                    root = root.left
                else:
                    if root.right is None:
                        root.right = Node(data)
                        break
                    root = root.right
        return self.root
    
    def printTree(self, node, level = 0):
        if node != None:
            self.printTree(node.right, level + 1)
            print('     ' * level, node)
            self.printTree(node.left, level + 1)

T = BST()
inp = [int(i) for i in input('Enter Input : ').split()]
for i in inp:
    root = T.insert(i)
T.printTree(root)

"""##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 : in-order , pre-order , and post-order traverse"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πç‡∏≤‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° code ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏ã‡∏∂‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô inorderTraversal() ‡∏à‡∏∞‡∏ó‡πç‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏≤‡∏Å Tree ‡πÅ‡∏ö‡∏ö in-order traversal ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö list 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô preorderTraversal() ‡πÅ‡∏•‡∏∞ postorderTraversal() ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á list ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏ó‡πç‡∏≤ pre-order traversal ‡πÅ‡∏•‡∏∞ post-order traversal ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏¢‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö inorderTraversal() 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô preorderTraversal() ‡πÅ‡∏•‡∏∞ postorderTraversal() ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
text_pre = "Preorder : "
text_in = "Inorder : "
text_post = "Postorder : "
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
    
    def __str__(self):
        return str(self.data)
class Queue:
    def __init__(self):
        self.items = []
    
    def is_empty(self):
        return len(self.items) == 0
    
    def enqueue(self, data):
        self.items.append(data)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)

class BST:
    def __init__(self):
        self.root = None
        self.left = None
        self.right = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            T = self.root
            while True:
                if data < T.data:
                    if T.left is None:
                        T.left = Node(data)
                        break
                    T = T.left
                else:
                    if T.right is None:
                        T.right = Node(data)
                        break
                    T = T.right
        return self.root
    
    def printTree(self, node, level = 0):
        global text_curr
        if node != None:
            self.printTree(node.right, level + 1)
            print('     ' * level, node)
            self.printTree(node.left, level + 1)
def preorder(root):
    global text_pre  
    if root:  
        text_pre += str(root.data) + " "
        preorder(root.left)  
        preorder(root.right)  
def inorder(root):  
    global text_in
    if root:  
        inorder(root.left)  
        text_in += str(root.data) + " "
        inorder(root.right)  
def postorder(root):  
    global text_post
    if root:  
        postorder(root.left)   
        postorder(root.right)
        text_post += str(root.data) + " "

T = BST()
inp = [int(i) for i in input('Enter Input : ').split()]
for i in inp:
    root = T.insert(i)
preorder(T.root)
print(text_pre)
inorder(T.root)
print(text_in)
postorder(T.root)
print(text_post)

"""##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3 : Breadth first (Level order)"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πç‡∏≤‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô breadthFirst() ‡∏ó‡∏µ‡πà‡∏ó‡πç‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏•‡πç‡∏≤‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Tree ‡∏à‡∏≤‡∏Å Root ‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞ level ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á level ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô list 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô breadthFirst() ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• list ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
text_pre = "Preorder : "
text_in = "Inorder : "
text_post = "Postorder : "
text_pr = "Breadth : "

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
    
    def __str__(self):
        return str(self.data)
class Queue:
    def __init__(self):
        self.items = []
    
    def is_empty(self):
        return len(self.items) == 0
    
    def enqueue(self, data):
        self.items.append(data)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)

class BST:
    def __init__(self):
        self.root = None
        self.left = None
        self.right = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)
        else:
            T = self.root
            while True:
                if data < T.data:
                    if T.left is None:
                        T.left = Node(data)
                        break
                    T = T.left
                else:
                    if T.right is None:
                        T.right = Node(data)
                        break
                    T = T.right
        return self.root
    
    def printTree(self, node, level = 0):
        global text_curr
        if node != None:
            self.printTree(node.right, level + 1)
            print('     ' * level, node)
            self.printTree(node.left, level + 1)
def preorder(root):
    global text_pre  
    if root:  
        text_pre += str(root.data) + " "
        preorder(root.left)  
        preorder(root.right)  
def inorder(root):  
    global text_in
    if root:  
        inorder(root.left)  
        text_in += str(root.data) + " "
        inorder(root.right)  
def postorder(root):  
    global text_post
    if root:  
        postorder(root.left)   
        postorder(root.right)
        text_post += str(root.data) + " "
def bread(root):
    global text_pr
    q = Queue()
    q.enqueue(root)
    while not q.is_empty():
        dQ = q.dequeue()
        text_pr += str(dQ.data) + ' '
        if dQ.left is not None:
            q.enqueue(dQ.left)
        if dQ.right is not None:
            q.enqueue(dQ.right)
    return text_pr

T = BST()
inp = [int(i) for i in input('Enter Input : ').split()]
for i in inp:
    root = T.insert(i)
preorder(T.root)
print(text_pre)
inorder(T.root)
print(text_in)
postorder(T.root)
print(text_post)
bread(T.root)
print(text_pr)

"""---
# ‚úÖ Activity : Implement linklist
"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Link List ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ABCDEF ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• XYZ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á C,D
class Node:
   def __init__(self, dataval=None):
      self.dataval = dataval
      self.nextval = None
class SLinkedList:
   def __init__(self):
      self.headval = None

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏ô‡∏î
   def Inbetween(self,middle_node,newdata):
      if middle_node is None:
         print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
         return

      NewNode = Node(newdata)
      NewNode.nextval = middle_node.nextval
      middle_node.nextval = NewNode

# ‡πÅ‡∏™‡∏î‡∏á linked list
   def listprint(self):
      printval = self.headval
      while printval is not None:
         print (printval.dataval)
         printval = printval.nextval

list = SLinkedList()
list.headval = Node("A")
e2 = Node("B")
e3 = Node("C")
e4 = Node("D")
e5 = Node("E")
e6 = Node("F")

list.headval.nextval = e2
e2.nextval = e3
e3.nextval = e4
e4.nextval = e5
e5.nextval = e6

list.Inbetween(e3,"XYZ")

list.listprint()

"""---
# ‚úÖ Activity : Stack Implementation
"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á Stack ‡πÅ‡∏•‡πâ‡∏ß Push ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A B C D E F Pop ‡∏≠‡∏≠‡∏Å‡∏à‡∏ô empty
class Stack:
  def __init__(self, list = None):
    if list == None:
      self.items = []
    else:
      self.items = list
    self.size = len(self.items)

  def __str__(self):
    s = 'stack of '+ str(self.size())+' items : '
    for ele in self.items:
      s += str(ele)+' '
    return s

  def push(self, i):
    self.items.append(i)
    self.size += 1

  def pop(self):
    return self.items.pop()

  def peek(self):
    return self.items[ -1]

  def isEmpty(self):
    return self.items == []
  
  def size(self):
    return len(self.items)

s = Stack(['A', 'B', 'C', 'D', 'E', 'F'])

while s.isEmpty() != True:
  print(s.items)
  print(s.pop())
print(s.isEmpty())

"""---
# ‚úÖ Lab04 : Implement Data Structure (Stack,Queue,LinkList)

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://drive.google.com/file/d/1-lTpmslyGZ3mT_6x-hIQVy0v9yDDl_O1/view

##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : ‡∏™‡∏£‡πâ‡∏≤‡∏á Stack ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ2 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (double head stack)
"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á double-head stack ‡∏î‡∏±‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢ 1. ‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A,B,C,D ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏à‡∏ô‡∏´‡∏°‡∏î (left push ,left pop) 2. ‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A,B,C,D ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏à‡∏ô‡∏´‡∏°‡∏î (right push ,right pop) 3. ‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A,B,C,D ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏à‡∏ô‡∏´‡∏°‡∏î (left push ,right pop) 4. ‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• A,B,C,D ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏à‡∏ô‡∏´‡∏°‡∏î (right push ,left pop) ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ : ‡∏ñ‡πâ‡∏≤‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ - ‡∏≠‡∏≠‡∏Å ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Stack ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ô‡πç‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏∞ ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô Queue
class Stack:
  def __init__(self):
    self.list_stack = []

  def push_left(self, item = None):
    if item is not None:
      self.list_stack.insert(0,item)
   
  def push_right(self, item = None):
    if item is not None:
      self.list_stack.append(item)

  def stack(self):
    return self.list_stack

  def pop_left(self):
    return self.list_stack.pop(0) if self.list_stack != [] else "No Stack"

  def pop_right(self):
    return self.list_stack.pop() if self.list_stack != [] else "No Stack"

  def size(self):
    return len(self.list_stack)

  def isEmpty(self):
    return self.list_stack == []

s1 = Stack()

s1.push_left("A")
print("Push Left",s1.stack())
s1.push_left("B")
print("Push Left",s1.stack())
s1.push_left("C")
print("Push Left",s1.stack())
s1.push_left("D")
print("Push Left",s1.stack())

print()
s1.push_right("E")
print("Push Righ:",s1.stack())
s1.push_right("F")
print("Push Righ:",s1.stack())
s1.push_right("G")
print("Push Righ:",s1.stack())

print()
for i in range(0,4):
  print("Pop Left:",s1.pop_left())
  print("stack : ",s1.stack())
print()

for i in range(0,3):
  print("Pop Right:",s1.pop_right())
  print("stack : ",s1.stack())
print()
print("stack : ",s1.stack())

"""##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 : ‡∏™‡∏£‡πâ‡∏≤‡∏á 2D - Linked List"""

#@title ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á 2D-Linked List ‡∏î‡∏±‡∏á‡∏£‡∏π‡∏õ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á constructure ‡∏Ç‡∏≠‡∏á Class 2DLinkedList , Class priNode , Class secNode 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Method a. Append_primary(pri_data) ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° primary node ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ primary link list b. Delete_primary(pri_data) ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö primary node ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data c. Append_secondary(pri_data , sec_data) ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° secondary node ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sec_data ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ primary link list ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data ‡πÇ‡∏î‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data ‡∏à‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô d. Delete_secondary(pri_data, sec_data) ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö secondary node ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sec_data ‡∏Ç‡∏≠‡∏á primary link list ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data ‡πÇ‡∏î‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pri_data ‡∏à‡∏∞‡πÑ‡∏°‡πà ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô e. Print_List() ‡∏™‡πç‡∏≤‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô List ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô A : A1,A2 B : B1,B2 C : C1,C2 3. ‡∏ó‡∏î‡∏•‡∏≠‡∏á insert data ‡πÉ‡∏´‡πâ‡∏°‡∏µ data structure ‡∏î‡∏±‡∏á‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Print_List() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
class priNode:
    def __init__(self, data, pri_next=None, sec_Node=None):
        self.priNode_data = data
        self.pri_next = pri_next
        self.sec_next = sec_Node
    def __str__(self):
        return str(self.priNode_data)


class secNode:
    def __init__(self, data, sec_next=None):
        self.secNode_data = data
        self.sec_next = sec_next
    def __str__(self):
        return str(self.secNode_data)


class LinkedList2D:
    def __init__(self):
        self.Head = None

    def Append_primary(self, pri_data):
        primary = priNode(pri_data)
        if self.Head == None:
            self.Head = primary
        else:
            n = self.Head
            while n.pri_next != None:
                n = n.pri_next
            n.pri_next = primary

    def Delete_primary(self, pri_data):
        next = self.Head
        if self.Head.priNode_data == pri_data:
            next = next.pri_next
            self.Head = next
        while next.pri_next != None:
            if next.pri_next.priNode_data == pri_data:
                after = next.pri_next.pri_next
                if after == None:
                    next.pri_next = None
                else:
                    next.pri_next = after
                break
            next = next.pri_next

    def Append_secondary(self, pri_data, sec_data):

        next_pri = self.Head

        while next_pri != None:
            if next_pri.priNode_data == pri_data:
                break
            next_pri = next_pri.pri_next

        Addnext_secDode = secNode(sec_data)

        if next_pri.sec_next == None:
            next_pri.sec_next = Addnext_secDode
        else:
            while next_pri.sec_next != None:
                next_pri = next_pri.sec_next
            next_pri.sec_next = Addnext_secDode

    def Delete_secondary(self, pri_data, sec_data):
        next_pri_node = self.Head
        while next_pri_node != None:
            if next_pri_node.priNode_data == pri_data:
                break
            next_pri_node = next_pri_node.pri_next

        while next_pri_node != None:
            before = next_pri_node.sec_next
            if next_pri_node.sec_next.secNode_data == sec_data:
                after = before.sec_next
                if after is None:
                    next_pri_node.sec_next = None
                else:
                    next_pri_node.sec_next = after
                break
            next_pri_node = next_pri_node.sec_next

    def Print_List(self):
        p = self.Head
        while p != None:
            print(p, end=":")
            s = p.sec_next
            while s != None:
                print(s, end=",")
                s = s.sec_next
            print("NULL")
            p = p.pri_next
        print("NULL")


l = LinkedList2D()

l.Append_primary("A")
l.Append_primary("B")
l.Append_primary("C")



l.Append_secondary("A", "A1")
l.Append_secondary("B", "B1")
l.Append_secondary("C", "C1")
l.Append_secondary("A", "A2")
l.Append_secondary("B", "B2")
l.Append_secondary("C", "C2")
l.Append_secondary("C", "C3")

#l.Append_secondary("C", "C3")
l.Print_List()
print()

l.Delete_secondary("C","C1")
l.Delete_secondary("C","C3")
l.Delete_primary("B")

l.Print_List()

"""---
# ‚úÖ Activity : Algorithm Analysis (Big-O)
"""

#@title Activity : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏´‡∏≤ source code ‡πÉ‡∏ô internet ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤ 1. ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏±‡πâ‡∏ô ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ 2. ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏±‡πâ‡∏ô ‡∏°‡∏µ Big-O ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
words= ["Apple", "Banana", "Car", "Dolphin" ]
for word in words:
  print ("The following lines will print each letters of "+word)
  for letter in word:
    print (letter)
  print("")

#1.‡∏ï‡∏≠‡∏ö ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ ‡πç‡∏≤‡∏à‡πç‡∏≤‡∏Å list ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
#2.‡∏ï‡∏≠‡∏ö O(n^2)

"""---
# ‚úÖ Lab03 : Algorithm Analysis

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://drive.google.com/file/d/1zVIf7-JuGDU3LcgYYp9dOs0h23oBhVzg/view

## ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : Time Calculation

### ‡∏Ç‡πâ‡∏≠ 1 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Source Code ‡πÉ‡∏ô internet ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô 2 ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ôtime() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
"""

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 1 :
import time
st = time.time()

Num = int(input("Enter number : "))
listNum = []
string = ""
i = 2
while Num > 1: 
  if Num % i == 0:
    Num = Num / i
    listNum.append(str(i))
  else:
    i += 1
print(listNum)

en = time.time()
elapsed_time = en - st
print('Execution time:', elapsed_time, 'seconds')

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 2 :
import time
st = time.time()

number = int(input("Enter number: "))
numberdiv = 1
checknum = number
checkdiv = number
z = []
while True:
    for i in range(2,number):
      if checkdiv % i == 0:
        numberdiv *= i
        checkdiv /= i
        z.append(str(i))
        break
    if numberdiv == checknum:
      break
print(z)

en = time.time()
elapsed_time = en - st
print('Execution time:', elapsed_time, 'seconds')

"""###‡∏Ç‡πâ‡∏≠ 2 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô NearestNeighbors ‡∏Ç‡∏≠‡∏á sklearn.neighbors ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ nearest point ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô 1000 ‡∏à‡∏∏‡∏î ‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î1,000,000 ‡∏à‡∏∏‡∏î ‡πÉ‡∏ô 2 ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏≠ ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏à‡∏∏‡∏î ‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö 1000 ‡∏à‡∏∏‡∏î ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÉ‡∏´‡πâ library ‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≠‡∏ö‡∏Ñ‡πç‡∏≤‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏Å‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤"""

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 1 :
import numpy as np
from sklearn.neighbors import NearestNeighbors
import random
import time

r = lambda: random.randint(0,10000)
samples = [[r(),r(),r()] for i in range(1000000)]
testdat = [[r(),r(),r()] for i in range(1000)]
neigh = NearestNeighbors(n_neighbors=1)
neigh.fit(samples)


st = time.time()

detect1 = neigh.kneighbors(testdat)


en = time.time()
elapsed_time = en - st
print('Execution time:', elapsed_time, 'seconds')

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 2 :
import numpy as np
from sklearn.neighbors import NearestNeighbors
import random
import time

r = lambda: random.randint(0,10000)
samples = [[r(),r(),r()] for i in range(1000000)]
testdat = [[r(),r(),r()] for i in range(1000)]
neigh = NearestNeighbors(n_neighbors=1)
neigh.fit(samples)

detect2=[]

st = time.time()
for i in testdat:
  detect2 += neigh.kneighbors([i])

en = time.time()
elapsed_time = en - st
print('Execution time:', elapsed_time, 'seconds')

"""##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2 : ‡∏à‡∏á‡∏´‡∏≤ Big-O ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ"""

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 1 :
n = input("input number : ")
n = int(n)
for i in range(1,n,2):
  print(i)

#Big-O = O(n)

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 2 :
n = input("input number : ")
n = int(n)
for x in range(1,n):
  for y in range(n - x):
    print (" ",end="")
  for y in range(1,x + 1):
    print(y,end="")
  for y in range(2,x + 1):
    print(x - y + 1,end="")
  print()

#Big-O = O(n^2)

#@title ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏µ‡πà 3 :
n = input("input number : ")
n = int(n)
i=1
while i<n:
  print(i)
  i=2*i

#Big-O = O(log n)

"""## ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3 : ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏°‡∏µ Big-O ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î"""

#@title ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 1 ‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ data ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ list ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡πà‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô rnddat ‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á sort() ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Big-O ‡πÄ‡∏õ‡πá‡∏ô O(n^2)
import random
mddat = [random.randint(1,1000) for i in range(0,10000)]

def Sort(data):
  dataRange = len(data)
  
  while dataRange != 1:
    Max = 0
    setter = 0
    for i in range(dataRange):
      if data[i] >= Max:
        Max = data[i]
        setter = i
    data[setter],data[dataRange - 1] = data[dataRange - 1],data[setter]
    dataRange -=1 
  return data

def Sort2(data):
  dataRange = len(data)
  for a in range(dataRange):
    for b in range(dataRange):
      if data[a] < data[b]:
        data[a],data[b] = data[b],data[a]
  return data

print(Sort(mddat))

#@title ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 2 ‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ data ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-1,000,000 ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1 ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡πç‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πç‡∏≤‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Big-O ‡πÄ‡∏õ‡πá‡∏ô O(log n)
import random
def binarysearch(array, l, r, x):
  if r>= l:
    mid = l+(r-l) // 2
    if array[mid] == x:
      return mid

    elif array[mid] >x:
      return binarysearch(array, l, mid-1, x)

    else:
      return binarysearch(array, mid+1, r, x)
  else:
    return -1

num = int(input("Enter Number : "))
dat = list(range(1,10001))
result = binarysearch(dat, 0, len(dat) -1, num)
if result != 1:
  print(result)
else:
  print('not')

"""---
# ‚úÖ Lab02 : Data Structure and Applications

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://drive.google.com/file/d/14UWQfrMED-85jpnXKkEXRlXEyHDQ8rGV/view

##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡πç‡∏≤‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
"""

#@title ‡∏Ç‡πâ‡∏≠ 1 List : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô remove_even() ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ 1 parameter ‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏∞ return ‡∏Ñ‡πà‡∏≤ list ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
def remove_even(lst):
  for ev in A:
    if (ev % 2 == 0):
        A.remove(ev)
  return lst
A = [1,2,3,4,5,6,7]
B = remove_even(A)
print(B) #[1,3,5,7]

#@title ‡∏Ç‡πâ‡∏≠ 2 Linked list : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Circular Linked list ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ
class Node:
  def __init__(self, dataval=None):
    self.dataval = dataval
    self.nextval = None

class SLinkedList:
  def __init__(self):
    self.headval = None

  def listprint(self):
    printval = self.headval
    while printval is not None:
      print(printval.dataval)
      if self.headval == printval.nextval:
        break
      printval = printval.nextval

list = SLinkedList()
list.headval = Node("abcd")
node2 = Node("efgh")
node3 = Node("ijkl")
node4 = Node("mnop")
node5 = Node("qrst")
node6 = Node("uvw")
node7 = Node("xyz")

list.headval.nextval = node2
node2.nextval = node3
node3.nextval = node4
node4.nextval = node5
node5.nextval = node6
node6.nextval = node7
node7.nextval = list.headval

list.listprint()

#@title ‡∏Ç‡πâ‡∏≠ 3 Stack : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ä‡πâlist ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á stack ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡πç‡∏≤‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡πç‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏•‡∏á‡πÉ‡∏ô stack ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤ (Reverse)
lst_stack = []

name = input("Type your name ::")
for i in name:
  lst_stack.append(i)
print ("Before ::",name)
print("After :: ",end="")

for j in range(len(lst_stack)):
  print (lst_stack.pop(),end="")

#@title ‡∏Ç‡πâ‡∏≠ 4 Tree : ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πç‡∏≤‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Tree ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡πç‡∏≤‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
class Node:
  def __init__(self, data):
    self.left = None
    self.right = None
    self.data = data
  
  def insert(self, data):
    if self.data:
      if data < self.data:
        if self.left is None:
          self.left = Node(data)
        else:
          self.left.insert(data)
      elif data > self.data:
        if self.right is None:
          self.right = Node(data)
        else:
          self.right.insert(data)

  def tree(self):
    if self.right:
       self.right.tree()
    print(self.data, end=" ")
    if self.left:
       self.left.tree()

num = input("Input number ::")
root = Node(num[0])
for i in num:
  root.insert(i)
root.tree()

"""---
# ‚úÖ Lab01 : Google Colab and Python

‡πÉ‡∏ö‡∏á‡∏≤‡∏ô : https://drive.google.com/file/d/1AiYWfrr1C7IiO5xokOly_qQgsRisBsWF/view

##‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1 : ‡∏Ñ‡πç‡∏≤‡∏™‡∏±‡πà‡∏á‡∏£‡∏±‡∏ö input , output , loop ‡πÅ‡∏•‡∏∞ condition
"""

#@title ‡∏Ç‡πâ‡∏≠ 1 ‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡πç‡∏≤‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
a = input("input first number ")
b = input("input second number ")
a,b = int(a),int(b)
for i in range(a,b):
  if i%2==1:
    print(i)

#‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏µ‡πà ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô a ‡∏ñ‡∏∂‡∏á b

#@title ‡∏Ç‡πâ‡∏≠ 2 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
a = input("input first number ")
b = input("input second number ")
a,b = int(a),int(b)
n = 0
for i in range(a,b+1):
  n = n+i
print(n)

#@title ‡∏Ç‡πâ‡∏≠ 3 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° 1 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô
a = int(input("Enter number : "))
factor = []
while a>1:
  for i in range(2,a+1):
    if a%i==0:
      factor.append(i)
      a//=i
      break  
print(*factor,sep=" x ")

#@title ‡∏Ç‡πâ‡∏≠ 4 ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° 2 ‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤ ‡∏´.‡∏£.‡∏°. ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô
a = int(input("Enter first number :"))
b = int(input("Enter second number :"))
divisor = min(a, b)
while divisor > 0:
    if a%divisor == 0 and b%divisor == 0:
        print('Greatest common divisor = ', divisor)
        break
    divisor -= 1

#@title ‡∏Ç‡πâ‡∏≠ 5 ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° 1 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏ï‡∏∏‡∏£‡∏±‡∏™‡∏Å‡∏•‡∏ß‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡∏ö‡∏ô‡∏à‡∏≠‡∏†‡∏≤‡∏û
side = int(input("Enter number: "))

for i in range(side):
    for n in range(side):
        if(i == 0 or i == side-1 or n == 0 or n == side-1):
            print('*', end = '')
        else:
            print(' ', end = '')
    print()